/**
* idpManager API Specification
* このドキュメントは、idpManagerのAPI仕様書です。
*
* The version of the OpenAPI document: 2.11.0.18
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package idpManager.srdm.model


import kotlinx.serialization.*
import kotlinx.serialization.internal.CommonEnumSerializer

/**
 * 
 * @param deviceId deviceId
 * @param modelName モデル名<br>登録後、情報取得未実行時は、空文字
 * @param serialNumber シリアル番号<br>登録後、情報取得未実行時は、空文字
 * @param ipAddress IPアドレス
 * @param friendlyName 名称
 * @param communicationStatus 通信状態<br> <table border=\"1\">   <tr><th>コード</th><th>説明</th></tr>   <tr><td>0000</td><td>正常（デバイスと通信でき、正常応答を受信）</td></tr>   <tr><td>0301</td><td>応答なし</td></tr>   <tr><td>0302</td><td>異常（デバイスと通信でき、異常応答を受信）</td></tr>   <tr><td>0303</td><td>デバイスの入れ替わり（IPアドレスを他のディスプレイデバイスで使用中）</td></tr>   <tr><td>0305</td><td>認証エラー（デバイスへのログイン失敗）</td></tr>   <tr><td>0306</td><td>異常（デバイスと通信できたが、ID情報取得失敗）</td></tr>   <tr><td>0310</td><td>通信エラー（プロトコルエラーや通信中の切断など）</td></tr>   <tr><td>0399</td><td>その他エラー</td></tr>   <tr><td>9999</td><td>通信未実行（デバイス登録直後から最初の情報取得結果を受信するまで）</td></tr> </table>
 * @param powerStatus モニター電源状態<br>登録後、情報取得未実行時は、空文字
 */
@Serializable
data class GetDeviceListRspDeviceList (
    /* deviceId */
    @SerialName(value = "deviceId") val deviceId: kotlin.String? = null,
    /* モデル名<br>登録後、情報取得未実行時は、空文字 */
    @SerialName(value = "modelName") val modelName: kotlin.String? = null,
    /* シリアル番号<br>登録後、情報取得未実行時は、空文字 */
    @SerialName(value = "serialNumber") val serialNumber: kotlin.String? = null,
    /* IPアドレス */
    @SerialName(value = "ipAddress") val ipAddress: kotlin.String? = null,
    /* 名称 */
    @SerialName(value = "friendlyName") val friendlyName: kotlin.String? = null,
    /* 通信状態<br> <table border=\"1\">   <tr><th>コード</th><th>説明</th></tr>   <tr><td>0000</td><td>正常（デバイスと通信でき、正常応答を受信）</td></tr>   <tr><td>0301</td><td>応答なし</td></tr>   <tr><td>0302</td><td>異常（デバイスと通信でき、異常応答を受信）</td></tr>   <tr><td>0303</td><td>デバイスの入れ替わり（IPアドレスを他のディスプレイデバイスで使用中）</td></tr>   <tr><td>0305</td><td>認証エラー（デバイスへのログイン失敗）</td></tr>   <tr><td>0306</td><td>異常（デバイスと通信できたが、ID情報取得失敗）</td></tr>   <tr><td>0310</td><td>通信エラー（プロトコルエラーや通信中の切断など）</td></tr>   <tr><td>0399</td><td>その他エラー</td></tr>   <tr><td>9999</td><td>通信未実行（デバイス登録直後から最初の情報取得結果を受信するまで）</td></tr> </table> */
    @SerialName(value = "communicationStatus") val communicationStatus: kotlin.String? = null,
    /* モニター電源状態<br>登録後、情報取得未実行時は、空文字 */
    @SerialName(value = "powerStatus") val powerStatus: GetDeviceListRspDeviceList.PowerStatus? = null
) {

    /**
    * モニター電源状態<br>登録後、情報取得未実行時は、空文字
    * Values: sTANDBY,nORMAL,nOSIGNAL
    */
    @Serializable(with = PowerStatus.Serializer::class)
    enum class PowerStatus(val value: kotlin.String){
        sTANDBY("STANDBY"),
        nORMAL("NORMAL"),
        nOSIGNAL("NOSIGNAL");

        object Serializer : CommonEnumSerializer<PowerStatus>("PowerStatus", values(), values().map { it.value.toString() }.toTypedArray())
    }
}

